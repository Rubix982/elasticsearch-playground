name: Elasticsearch Playground CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Go Projects
    runs-on: ubuntu-latest
    
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
    
    strategy:
      matrix:
        project: [index-explorer, cluster-explorer, search-api]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        cd projects/${{ matrix.project }}
        go mod download
        go mod tidy
        
    - name: Wait for Elasticsearch
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'
        
    - name: Run tests
      run: |
        cd projects/${{ matrix.project }}
        go test -v -race -coverprofile=coverage.out ./...
        
    - name: Run benchmarks
      run: |
        cd projects/${{ matrix.project }}
        go test -bench=. -benchmem ./... | tee benchmark.txt
        
    - name: Generate test coverage
      run: |
        cd projects/${{ matrix.project }}
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.project }}
        path: projects/${{ matrix.project }}/coverage.*
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmarks-${{ matrix.project }}
        path: projects/${{ matrix.project }}/benchmark.txt

  build:
    name: Build Projects
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        project: [index-explorer, cluster-explorer, search-api]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build project
      run: |
        cd projects/${{ matrix.project }}
        go build -v -o ../../bin/${{ matrix.project }} ./cmd/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: bin/

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: projects/index-explorer
        
    - name: Run go fmt
      run: |
        for project in projects/*/; do
          echo "Checking formatting for $project"
          cd "$project"
          gofmt -s -l . | tee fmt-errors.txt
          if [ -s fmt-errors.txt ]; then
            echo "❌ Formatting issues found"
            exit 1
          fi
          cd - > /dev/null
        done
        
    - name: Run go vet
      run: |
        for project in projects/*/; do
          echo "Running go vet for $project"
          cd "$project"
          go vet ./...
          cd - > /dev/null
        done

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms1g -Xmx1g
          indices.memory.index_buffer_size: 20%
          thread_pool.write.size: 8
        ports:
          - 9200:9200
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        pip install faker
        
    - name: Generate test datasets
      run: |
        mkdir -p datasets/samples
        cd datasets/generators
        python3 document_generator.py --type=small --count=100 --output=../samples/ci-small.ndjson
        python3 document_generator.py --type=medium --count=50 --output=../samples/ci-medium.ndjson
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: bin/
        
    - name: Make binaries executable
      run: chmod +x bin/*
      
    - name: Wait for Elasticsearch
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'
        
    - name: Start Index Explorer
      run: |
        cd projects/index-explorer
        chmod +x ../../bin/index-explorer
        ../../bin/index-explorer &
        sleep 10
        
    - name: Run performance tests
      run: |
        cd projects/index-explorer
        timeout 300s go run cmd/perf-test/main.go quick || echo "Performance test completed"
        
    - name: Collect performance metrics
      run: |
        curl -s http://localhost:8082/health || echo "Service not responding"
        curl -s http://localhost:8082/api/v1/metrics/write-performance || echo "Metrics not available"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
        
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/index-explorer
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: projects/index-explorer
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        npm install -g @mermaid-js/mermaid-cli
        
    - name: Generate documentation
      run: |
        # Generate API documentation from OpenAPI specs
        echo "Generating documentation..."
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        
  notify:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [test, build, lint, performance-test]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#elasticsearch-playground'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          *Elasticsearch Playground CI/CD*
          
          *Status:* ${{ job.status }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* ${{ github.sha }}
          *Author:* ${{ github.actor }}
          
          *Test Results:*
          • Tests: ${{ needs.test.result }}
          • Build: ${{ needs.build.result }} 
          • Lint: ${{ needs.lint.result }}
          • Performance: ${{ needs.performance-test.result }}
          
          <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: contains(fromJSON('["success", "failure"]'), job.status)